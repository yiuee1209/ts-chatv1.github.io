let isSttReady = false;
let isRecording = false;

document.addEventListener('DOMContentLoaded',()=>{
    const recordButton = document.getElementById('record-button');
    // Á¶ÅÁî®ÊåâÈàïÁõ¥Âà∞STTÊ∫ñÂÇôÂ•Ω
    recordButton.disabled = true;
    recordButton.textContent = "ÂàùÂßãÂåñ‰∏≠...";
    
    async function setupSTT() {
        try {
            console.log("ÈñãÂßã STT ÂàùÂßãÂåñ...");
            Recorder = new ASRRecorder("ASR0421_70789634","Api042170789634","https://asrapi01.bronci.com.tw",false)
            // *** ÂÅáË®≠ÁöÑÂáΩÊï∏ÂêçÁ®±ÂíåÂèÉÊï∏Ôºå‰Ω†ÈúÄË¶ÅÊõøÊèõÊàêÂØ¶ÈöõÁöÑ ***
            // ÂèØËÉΩÈúÄË¶ÅÂÇ≥ÂÖ•Â∏≥ËôüÂØÜÁ¢ºÁ≠âÔºåÊàñÂÆÉÂÄëÊòØÂæûÂÖ®ÂüüËÆäÊï∏ËÆÄÂèñ
            await handleInit();
            console.log("ÂàùÂßãÂåñÂÆåÊàê„ÄÇ");

            //console.log("ÈñãÂßãÂèñÂæóÊ®°Âûã...");
            // *** ÂÅáË®≠ÁöÑÂáΩÊï∏ÂêçÁ®±Ôºå‰Ω†ÈúÄË¶ÅÊõøÊèõÊàêÂØ¶ÈöõÁöÑ ***
            //await handleGetModelList();
            //console.log("Ê®°ÂûãÂèñÂæóÂÆåÊàê„ÄÇ");

            isSttReady = true;
            recordButton.disabled = false;
            recordButton.textContent = "üé§ ÈñãÂßãÈåÑÈü≥";
            console.log("STT Â∑≤Ê∫ñÂÇôÂ∞±Á∑íÔºÅ");

        } catch (error) {
            console.error("STT ÂàùÂßãÂåñÊàñÂèñÂæóÊ®°ÂûãÂ§±Êïó:", error);
            recordButton.textContent = "STT ÈåØË™§";
            // ÂèØ‰ª•È°ØÁ§∫Êõ¥ÂèãÂ•ΩÁöÑÈåØË™§Ë®äÊÅØÁµ¶‰ΩøÁî®ËÄÖ
        }
    }

    // Âü∑Ë°åSTTË®≠ÁΩÆ
    setupSTT();

    recordButton.addEventListener('click', async () => {
        if (!isSttReady) {
            console.warn("STT Â∞öÊú™Ê∫ñÂÇôÂ•ΩÔºåÁÑ°Ê≥ïÈåÑÈü≥„ÄÇ");
            return; // Â¶ÇÊûúSTTÊú™Â∞±Á∑íÔºå‰∏çÂü∑Ë°å‰ªª‰ΩïÊìç‰Ωú
        }
    
        if (!isRecording) {
            // --- ÈñãÂßãÈåÑÈü≥ ---
            try {
                console.log("ÂòóË©¶ÈñãÂßãÈåÑÈü≥...");
                // *** ÂÅáË®≠ÁöÑÂáΩÊï∏ÂêçÁ®±Ôºå‰Ω†ÈúÄË¶ÅÊõøÊèõÊàêÂØ¶ÈöõÁöÑ ***
                await handleStart();
                isRecording = true;
                recordButton.textContent = "‚èπÔ∏è ÂÅúÊ≠¢ÈåÑÈü≥";
                console.log("ÈåÑÈü≥Â∑≤ÈñãÂßã„ÄÇ");
                // ÂèØËÉΩÈúÄË¶Å‰∏Ä‰∫õË¶ñË¶∫ÊèêÁ§∫Ôºå‰æãÂ¶ÇÊåâÈàïËÆäËâ≤
    
            } catch (error) {
                console.error("ÈñãÂßãÈåÑÈü≥Â§±Êïó:", error);
                // ÈáçÁΩÆÁãÄÊÖãÊàñÈ°ØÁ§∫ÈåØË™§
                isRecording = false; // Á¢∫‰øùÁãÄÊÖãÊ≠£Á¢∫
                recordButton.textContent = "üé§ ÈñãÂßãÈåÑÈü≥";
            }
        } else {
            // --- ÂÅúÊ≠¢ÈåÑÈü≥ ---
            try {
                console.log("ÂòóË©¶ÂÅúÊ≠¢ÈåÑÈü≥...");

                
                await Recorder.websocket.send("EOS");
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† console.log("Â∑≤ÁôºÈÄÅ EOS ‰ø°Ëôü„ÄÇ");

                await handleStop();
                isRecording = false;
                recordButton.textContent = "üé§ ÈñãÂßãÈåÑÈü≥";
                console.log("ÈåÑÈü≥Â∑≤ÂÅúÊ≠¢„ÄÇ");
                // Á≠âÂæÖÁµêÊûúÂõûÂÇ≥ (‰∏ã‰∏ÄÊ≠•ËôïÁêÜ)


    
            } catch (error) {
                console.error("ÂÅúÊ≠¢ÈåÑÈü≥Â§±Êïó:", error);
                 // ÂèØËÉΩÈúÄË¶ÅÈáçÁΩÆÁãÄÊÖãÊàñÈ°ØÁ§∫ÈåØË™§
                 // Âç≥‰ΩøÂÅúÊ≠¢Â§±ÊïóÔºå‰πüÂèØËÉΩÈúÄË¶ÅÂ∞áUIÁãÄÊÖãÊîπÂõûÈùûÈåÑÈü≥ÁãÄÊÖã
                 isRecording = false;
                 recordButton.textContent = "üé§ ÈñãÂßãÈåÑÈü≥";
            }
        }
    });
    
    const sttOutputElement = document.getElementById('js-content');
    const chatInputElement = document.getElementById('textInput');
    
    if (sttOutputElement && chatInputElement) {
        const observer = new MutationObserver((mutationsList, observer) => {
            // Áõ£ËÅΩÂà∞ËÆäÂåñ
            for(const mutation of mutationsList) {
                if (mutation.type === 'childList' || mutation.type === 'characterData') {
                    const newText = sttOutputElement.textContent;
                    if (newText && newText.trim() !== "") { // Á¢∫‰øùÊúâÂÖßÂÆπ‰∏îÈùûÁ©∫
                        console.log("MutationObserver ÂÅµÊ∏¨Âà∞ STT Ëº∏Âá∫:", newText);
                        chatInputElement.value += newText + " "; // ÈôÑÂä†Âà∞ËÅäÂ§©Ëº∏ÂÖ•Ê°Ü
                        chatInputElement.focus();
                        // Ê∏ÖÁ©∫‰æÜÊ∫êÔºåÈÅøÂÖçÈáçË§áËß∏ÁôºÊàñÁ¥ØÁ©çËàäÂÖßÂÆπ
                        sttOutputElement.textContent = '';
                    }
                }
            }
        });

        // Ë®≠ÂÆöËßÄÂØüÁõÆÊ®ôÂíåÈÅ∏È†Ö
        const config = { childList: true, characterData: true, subtree: true };
        observer.observe(sttOutputElement, config);
        console.log("MutationObserver Â∑≤ÈôÑÂä†Âà∞ #js-content");

        // (ÂèØÈÅ∏) Âú®È†ÅÈù¢Âç∏ËºâÊôÇÂÅúÊ≠¢ËßÄÂØü
        // window.addEventListener('beforeunload', () => observer.disconnect());

    } else {
        console.error("#js-content Êàñ #textInput ÂÖÉÁ¥†Êú™ÊâæÂà∞ÔºåMutationObserver ÁÑ°Ê≥ïË®≠ÂÆö„ÄÇ");
    }

});








async function initSession() {
¬†¬†¬† try {
¬†¬†¬†¬†¬†¬†¬† const requestOptions = {
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† method: "POST",
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† redirect: "follow"
¬†¬†¬†¬†¬†¬†¬† };

¬†¬†¬†¬†¬†¬†¬† const response = await fetch("https://retibot-247393254326.us-central1.run.app/init", requestOptions);
¬†¬†¬†¬†¬†¬†¬† const result = await response.json(); // ÂÅáË®≠ÂõûË¶ÜÊòØ JSON Ê†ºÂºè
¬†¬†¬†¬†¬†¬†¬† console.log(result);

¬†¬†¬†¬†¬†¬†¬† // È°ØÁ§∫ÂõûË¶ÜÂú® bot Â∞çË©±Ë£°Èù¢
¬†¬†¬†¬†¬†¬†¬† appendMessage('bot', result.message); // ÂÅáË®≠ÂõûË¶Ü‰∏≠Êúâ 'message' Ê¨Ñ‰Ωç

¬†¬†¬†¬†¬†¬†¬† // Áç≤Âèñ session_id ÁöÑÂÄº
¬†¬†¬†¬†¬†¬†¬† const sessionId = result.session_id; // ÂÅáË®≠ÂõûË¶Ü‰∏≠Êúâ 'session_id' Ê¨Ñ‰Ωç
¬†¬†¬†¬†¬†¬†¬† return sessionId;
¬†¬†¬† } catch (error) {
¬†¬†¬†¬†¬†¬†¬† console.error('ÂàùÂßãÂåñÊúÉË©±Â§±Êïó:', error);
¬†¬†¬†¬†¬†¬†¬† appendMessage('bot', 'ÂàùÂßãÂåñÊúÉË©±Â§±Êïó');
¬†¬†¬†¬†¬†¬†¬† return null;
¬†¬†¬† }
}

let sessionId = null;
document.addEventListener('DOMContentLoaded', async () => {
¬†¬†¬† const sessionId = await initSession();
¬†¬†¬† if (sessionId) {
¬†¬†¬†¬†¬†¬†¬† console.log("Session Â∑≤ÂàùÂßãÂåñÔºåsessionId:", sessionId);
¬†¬†¬† } else {
¬†¬†¬†¬†¬†¬†¬† console.error("Session ÂàùÂßãÂåñÂ§±Êïó");
¬†¬†¬† }
});




    function toggleMenu(){
        const menu = document.getElementById('menu');
        menu.style.display = menu.style.display === 'block' ? 'none':'block';
    }
    
    const chat = document.getElementById('chat');
    function sendMessage(){
        const input = document.getElementById('textInput');
        const text = input.value.trim();
        if (text === '') return;
    
        appendMessage('user',text);
        input.value='';
    
        appendLoading();
        console.log(sessionId,text)
        fetch('https://retibot-247393254326.us-central1.run.app/chat',{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({session_id: sessionId, message: text})
        })
        .then(res=>res.json())
        .then(data=>{
            removeLoading();
            appendMessage('bot',data.reply);
        })
        .catch(error=>{
            removeLoading();
            console.error('Error',error);
            appendMessage('bot','ÂæàÊä±Ê≠âÔºåÂ§ßÂÆáÂÆôÊÑèË≠òÊñ∑Á∑ö‰∏≠„ÄÇ')
        });
    }
    function appendMessage(sender,text){
        const message=document.createElement('div');
        message.className=`message ${sender}`;
        if (sender === 'bot'){
            const avatar = document.createElement('div');
            avatar.className = ' avatar';
            message.appendChild(avatar);
        
            const bubble = document.createElement('div');
            bubble.className = ' bubble';
            bubble.textContent = text;
            message.appendChild(bubble);
        
        } else if (sender === 'user'){
            const bubble =document.createElement('div');
            bubble.className=' bubble';
            bubble.textContent = text;
            message.appendChild(bubble);
        }
    
        chat.appendChild(message);
        chat.scrollTop=chat.scrollHeight;
    }
    
    let loadingMessage;
    function appendLoading(){
        loadingMessage = document.createElement('div');
        loadingMessage.className = 'message bot'
    
        const avatar = document.createElement('div');
        avatar.className='avatar';
        loadingMessage.appendChild(avatar);
    
        const bubble = document.createElement('div');
        bubble.className = 'bubble';
    
        const loading = document.createElement('div');
        loading.className = 'loading';
        loading.innerHTML = '<span></span><span></span><span></span>';
        
        bubble.appendChild(loading);
        loadingMessage.appendChild(bubble);
    
        chat.appendChild(loadingMessage);
        chat.scrollTop = chat.scrollHeight;
    }
    
    function removeLoading(){
        if (loadingMessage){
            chat.removeChild(loadingMessage);
            loadingMessage=null;
        }
    }

  // ÁâàÊú¨Ë≥áË®ä
  const VERSION = "1.0.5";
  console.log(`Demo index.html version: ${VERSION}`);

  let Recorder = null;
  let autoScroll = true;

  /**
   * ÊäìÂèñ DOM
   */
    const username = "ASR0421_70789634";
    const password = "Api042170789634";
    const url = "https://asrapi01.bronci.com.tw";
    const recordFileCheckbox = false;
    const parserUrl = "";
  //const username = document.querySelector("#username");
  //const password = document.querySelector("#password");
  //const devices = document.querySelector("#devices");
  const devices = "default"
  //const url = document.querySelector("#url");
  //const parserUrl = document.querySelector("#parser");
  //const initButton = document.querySelector("#js-init-button");
  //const message = document.querySelector("#js-error-message");
  const getModelListButton = document.querySelector(
    "#js-get-model-list-button"
  );
  const startRecordBtn = document.querySelector("#js-start-record");
  const stopRecordBtn = document.querySelector("#js-stop-record");
  const websocketStatus = document.querySelector("#js-websocket-status");
  const content = document.querySelector("#js-content");
  //const modelSelect = document.querySelector("#js-model-select");
  const clearContentButton = document.querySelector(
    "#js-clear-content-button"
  );
  const autoScrollButton = document.querySelector("#js-auto-scroll");
  const audioBits = document.getElementById("js-audio-bps");
  const volumeCells = document.querySelectorAll(".volume-cell");
  //const recordFileCheckbox = document.querySelector("#js-record-file");
  const parserResult = document.querySelector("#js-parser-result");

  /**
   * ÂàùÂßãÂåñ DOM ‰πãÈ°ØÁ§∫ÊñáÂ≠ó
   */
  //message.innerText = "Please click Initialize before start";
  //message.classList.add("blue");
  const connStatusLabel = "Connection status: ";
  const audioBpsLabel = "Audio bitrate: ";
  //websocketStatus.innerText = `${connStatusLabel} No connection`;
  //audioBits.innerText = `${audioBpsLabel} 0 Kbps`;

  /**
   * ÊäìÂèñ DOM ‰∏¶Ë®≠ÂÆö‰∫ã‰ª∂Áõ£ËÅΩ
  
  initButton.addEventListener("click", handleInit);
  getModelListButton.addEventListener("click", handleGetModelList);
  startRecordBtn.addEventListener("click", handleStart);
  stopRecordBtn.addEventListener("click", handleStop);
  autoScrollButton.addEventListener("click", handleAutoScroll);
  clearContentButton.addEventListener("click", handleClear);
  recordFileCheckbox.addEventListener("change", handleChangeRecordFile);
  */
  /**
   * ‰ΩøÁî®‰ª£ÁêÜÂô®ËôïÁêÜÁãÄÊÖã
  */
  const handler = {
    set: function (obj, props, value) {
      obj[props] = value;

      if (obj.status) {
        //getModelListButton.removeAttribute("disabled");
        //startRecordBtn.removeAttribute("disabled");
        //stopRecordBtn.removeAttribute("disabled");
      } else {
        //getModelListButton.setAttribute("disabled", true);
        //startRecordBtn.setAttribute("disabled", true);
        //stopRecordBtn.setAttribute("disabled", true);
        //modelSelect.innerText = "";
      }

      if (obj.status && obj.isRecording) {
        //stopRecordBtn.removeAttribute("disabled");
        //startRecordBtn.setAttribute("disabled", true);
      } else if (obj.status && !obj.isRecording) {
        //startRecordBtn.removeAttribute("disabled");
        //stopRecordBtn.setAttribute("disabled", true);
      }
    },
  };
  const proxy = new Proxy({ status: false, isRecording: false }, handler);
  
  /**
   * ÂÖÅË®±È∫•ÂÖãÈ¢®Ê¨äÈôê
   *
   * Ê≠§Ê≠•È©üÂè™ÊòØÁÇ∫‰∫ÜÁç≤ÂèñÈ∫•ÂÖãÈ¢®Ê¨äÈôêÔºåÂØ¶ÈöõÊìç‰ΩúÈ†àËá≥ ASRRecorder.js ‰∏≠Âü∑Ë°å
   */
  let tempStream = null;
  async function getUserMediaPermission() {
    tempStream = await navigator.mediaDevices.getUserMedia({
      audio: {
        noiseSuppression: false,
        autoGainControl: false,
      },
      video: false,
    });
  }

  /**
   * ÂâµÂª∫ÂèØÈÅ∏Êìá audio devices ÂàóË°®
   */
  async function getAudioDevices() {
    if (!tempStream) {
      await getUserMediaPermission();
    }

    const audioDevices = await navigator.mediaDevices.enumerateDevices();
      
    audioDevices.forEach((device) => {
      if (device.kind === "audioinput") {
        const option = document.createElement("option");
        option.value = device.deviceId;
        option.text = device.label;
        //devices.appendChild(option);
      }
    });

    // ÈáãÊîæÊéâ stream Âõ†ÁÇ∫Âè™ÊòØ‰∏ÄÊ¨°ÊÄßÈúÄÁç≤ÂèñÈ∫•ÂÖãÈ¢®Ê¨äÈôê
    tempStream.getTracks().forEach((track) => track.stop());
  }
  getAudioDevices();

  /**
   * ÂàùÂßãÂåñ
   */
  async function handleInit() {
    //event.preventDefault();

    // Ê∏ÖÈô§ÁãÄÊÖã classes
    //message.classList.remove("red", "green", "blue");

    if (!username.value && !password.value && !url.value) {
      //message.innerText =
      //  "Please input username, password, and server URL";
      //message.classList.remove("green");
      //message.classList.add("red");
      return;
    }

    /**
     * ÂàùÂßãÂåñ Recorder ÂèÉÊï∏‰æùÂ∫èÁÇ∫ username, password, API url, isRecord
     *
     * Ë´ãËº∏ÂÖ•Êèê‰æõ‰πãÂ∏≥Ëôü
     * Ë´ãËº∏ÂÖ•Êèê‰æõ‰πãÂØÜÁ¢º
     * Ë´ãËº∏ÂÖ•Êèê‰æõ‰πã API Á∂≤ÂùÄ
     * Ë´ãËº∏ÂÖ•ÊòØÂê¶ÊñºÈåÑÈü≥ÂÆåÊàêÂæåËº∏Âá∫ÈåÑÈü≥Ê™îÊ°à
     */
    try {
      handleDestroy();

      Recorder = new ASRRecorder(
        username.value,
        password.value,
        url.value,
        recordFileCheckbox.checked
      );
      //message.innerText = "Initialized";
      //message.classList.add("green");
      console.log("Initialized");

      proxy.status = true;
    } catch (error) {
      //message.innerText = error;
      //message.classList.add("red");

      proxy.status = false;
    }
  }

  /**
   * Ëã•ÈúÄ‰øÆÊîπ ASR modelÔºåÂèØÊäìÂèñ ASR ÊâÄÊèê‰æõÁöÑ Model Ë®ìÁ∑¥Ë≥áÊñô (optional)
  
  async function handleGetModelList() {
    if (!Recorder) return;
    try {
      const { data } = await Recorder.getModelList();
    
      if (data) {
        //modelSelect.innerText = "";
        data.forEach((item) => {
          const option = document.createElement("option");
          option.value = item.name;
          //option.innerText = item.displayName;
          if (item.isDefaultModel === 1) {
            option.setAttribute("selected", true);
          }
          modelSelect.appendChild(option);
        });
      }
    } catch (error) {
      console.log(error);
    }
  }
 */
  /**
   * ÈñãÂßãËΩâÊèõËÅ≤Èü≥Ë≥áÊñô
   *
   * ÈáçË¶ÅÔºöË´ã‰ΩøÁî® callback ÂõûÂÇ≥ÊäìÂèñÁøªË≠ØÁµêÊûú
   */
  async function handleStart() {
    // Á¨¨‰∏ÄÂÄãÂèÉÊï∏ÁÇ∫ model Ëã•ÁÑ°Ë®≠ÂÆö null ÔºåÂâá‰ΩøÁî®È†êË®≠Ê®°Âûã
    // Á¨¨‰∫åÂÄãÂèÉÊï∏ÁÇ∫ device Ëã•ÁÑ°Ë®≠ÂÆöË´ãËº∏ÂÖ• null ÔºåÂâá‰ΩøÁî®È†êË®≠ËÅ≤Èü≥Ë®≠ÂÇô
    // Á¨¨‰∏âÂÄãÂèÉÊï∏ÁÇ∫ parser ÁöÑÁ∂≤ÂùÄÔºåËã•ÁÑ°Ë®≠ÂÆöÂâá‰∏çÊúÉËß∏Áôº parser
    // Á¨¨ÂõõÂÄãÂèÉÊï∏ÁÇ∫ callbackÔºåÂõûÂÇ≥ÁµêÊûú
    //const options = modelSelect.options;
    //const index = modelSelect.options.selectedIndex;
    //const model = index !== -1 ? options[index].value : null;

    //const deviceIndex = devices.options.selectedIndex;
    //const deviceValue = devices.options[deviceIndex].value;
    const parserUrlValue = parserUrl.value;
    const model = "basic-model";
    const deviceValue = null;

    //websocketStatus.innerText = `${connStatusLabel} Connecting ...`;

    try {
      await Recorder.start(model, deviceValue, parserUrlValue, (data) => {
        /*if (data.type === "Parser") {
          handleRenderParserResult(data);
          return;
        }
        */
        handleRender(data);
      });
      //await setScreenLock(); // ÈéñÂÆöÁï´Èù¢
      proxy.isRecording = true;
    } catch (error) {
      console.log(error);
      //websocketStatus.innerText = `${connStatusLabel} ${error}`;
      handleStop();
    }
  }

  /**
   * ÂÅúÊ≠¢ËΩâÊèõËÅ≤Èü≥Ë≥áÊñô
   */
  async function handleStop() {
    await Recorder.stop();
    //await releaseScreenLock(); // ÈáãÊîæÁï´Èù¢
    handleVolumeCellColor(0);
    proxy.isRecording = false;
  }

  /**
   * Áï∂‰Ω†Èõ¢ÈñãÈ†ÅÈù¢ÊôÇÔºåËã•È†ÅÈù¢Êúâ keep-alive Ê©üÂà∂ÔºåË´ãÁî®Ê≠§ÂáΩÂºèÂÅúÊ≠¢ËΩâÊèõËÅ≤Èü≥Ë≥áÊñôÂèäÂõûÂæ© ASRRecorder ÂàùÂßãÁãÄÊÖã
   */
  function handleDestroy() {
    if (Recorder) Recorder.destroy();
  }

  /**
   * Ê∏≤ÊüìÈ∫•ÂÖãÈ¢®ËÅ≤Èü≥Âº∑Â∫¶
   */
  const volumeCellLength = volumeCells.length;
  const maximumValue = 60;
  const gap = maximumValue / volumeCellLength; // 60 / 24 = 2.5
  function handleVolumeCellColor(volume) {
    const dB = handleConvertDecibel(volume);
    const allVolumeCells = [...volumeCells];
    const numberOfCells = Math.round(dB / gap);

    let cellsToColored;
    if (numberOfCells >= volumeCellLength) {
      cellsToColored = allVolumeCells.slice(volumeCellLength);
    } else {
      cellsToColored = allVolumeCells.slice(
        0,
        volumeCellLength - numberOfCells
      );
    }

    for (const cell of allVolumeCells)
      cell.style.backgroundColor = "#cccccc";

    for (const cell of cellsToColored) {
      const classes = cell.classList;

      cell.style.backgroundColor = classes.contains("red")
        ? "#f56c6c"
        : classes.contains("orange")
        ? "#e6a23c"
        : "#67c23a";
    }
  }

  /**
   * Â∞áËÅ≤Èü≥ÈáèÂåñÊàêÂàÜË≤ù(dB)
   *
   * Ê≥®ÊÑèÔºöÊàëÂÄëÂÉÖÁî®ÂàÜË≤ùÂÖ¨ÂºèÁâπÊÄßË®àÁÆóËÅ≤Èü≥Âº∑Â∫¶Ëàá 16bits ÈÇäÁïåÂÄº(boundary)ÁöÑÈóú‰øÇÔºå‰ΩøÁî®ÁöÑÊòØÁ∑öÊÄßÊØî‰æãÔºå‰∏¶ÈùûÂØ¶ÈöõÁöÑÂàÜË≤ù
   * formula ref: https://dspillustrations.com/pages/posts/misc/decibel-conversion-factor-10-or-factor-20.html
   */
  function handleConvertDecibel(volume) {
    return -10 * Math.log10(volume);
  }

  /**
   * Demo Â¶Ç‰ΩïÂ∞áÁøªË≠ØÂ•ΩÁöÑË≥áÊñôÊ∏≤ÊüìÂà∞Áï´Èù¢‰∏ä
   */
  function handleRender(data) {
    const { code, result, status, message, bits, volume } = data;

    if (status) {
      if (status === "opened") {
        //websocketStatus.innerText = `${connStatusLabel} Connected (${message})`;
      } else if (status === "closed") {
        //websocketStatus.innerText = `${connStatusLabel} Disconnected (${message})`;
        //audioBits.innerText = `${audioBpsLabel} 0 Kbps`;
        handleStop();
      } else if (status === "bits") {
        //audioBits.innerText = `${audioBpsLabel} ${bits} Kbps`;
      } else if (status === "volume") {
        handleVolumeCellColor(volume);
      }

      return;
    }

    // Ê≠§ÁãÄÊÖãÁÇ∫ ASR ÂïüÂãï‰∏≠ÔºåÂèØÂøΩÁï•
    if (code === 100 || code === 180) return;

    // ËôïÁêÜÈåØË™§
    // STATUS_UNAUTHORIZED = 401;
    // BRIDGE_STATUS_IDLE_TIMEOUT = 408;
    // BRIDGE_STATUS_UNSUPPORTED_PARAMS = 415;
    // BRIDGE_STATUS_NO_RESOURCE = 486;
    // BRIDGE_STATUS_SERVER_ERROR = 500;
    // BRIDGE_STATUS_SERVER_UNREACHED = 502;
    // BRIDGE_STATUS_SERVER_ABORT = 503;
    // BRIDGE_STATUS_UNKNOWN = 599;
    const errorCode = [401, 408, 415, 486, 500, 502, 503, 599];
    if (errorCode.includes(code)) {
      //websocketStatus.innerText = `${connStatusLabel} Connected (${message})`;
      //audioBits.innerText = `${audioBpsLabel} 0 Kbps`;
      handleStop();
    }

    // ËôïÁêÜ 204 ËôïÁêÜÂÆåÊàêÊÉÖÊ≥Å
    if (code === 204) {
      handleStop();
    }

    // Ê≠§ÁãÄÊÖãÁÇ∫ ASR ËΩâÊèõÂÆåÊàêÔºå‰∏¶ÂèØÊ∏≤ÊüìËá≥È†ÅÈù¢‰∏ä
    if (code === 200) {
      const { segment, transcript, final } = result[0];

      const dom = document.querySelector(`[data-segment="${segment}"]`);
      console.log("1",dom) //
      if (!dom) {
        const d = document.createElement("p");
        d.dataset.segment = segment;
        d.innerText = transcript;
    
        content.appendChild(d);
        console.log("2",content) //
      } else {
        dom.innerText = transcript;
        console.log("3",dom) //
      }

      if (autoScroll) {
        // ASR output ÂçÄÂ°ä
        content.scrollTop = content.scrollHeight;
        content.animate({ scrollTop: content.scrollHeight });

        parserResult.scrollTop = parserResult.scrollHeight;
        parserResult.animate({ scrollTop: parserResult.scrollHeight });
      }
    }
  }

  /**
   * Ê∏≤Êüì parser ÁµêÊûú
   */
  function handleRenderParserResult(data) {
    const dom = document.createElement("p");
    dom.innerText = JSON.stringify(data);

    parserResult.appendChild(dom);
    console.log("4",parserResult)
  }

  /**
   * ËôïÁêÜ auto scroll
   */
  /*
  function handleAutoScroll() {
    autoScroll = !autoScroll;

    autoScrollButton.innerText = autoScroll
      ? "Auto scroll OFF"
      : "Auto scroll ON";
  }
*/
  /**
   * Ê∏ÖÈô§ js-content Ë≥áÊñô
   */
  function handleClear() {
    content.innerHTML = "";
    parserResult.innerHTML = "";
  }

  /**
   * Á¢∫Ë™çÁÄèË¶ΩÂô®ÊòØÂê¶ÊîØÊè¥ screen wake lock
   
  function isScreenLockSupported() {
    return "wakeLock" in navigator;
  }
  */
  /**
   * Ë®≠ÂÆöÁÄèË¶ΩÂô® screen lock

  let screenLock;
  async function setScreenLock() {
    if (isScreenLockSupported()) {
      try {
        screenLock = await navigator.wakeLock.request("screen");
        console.log(`screen lock ${screenLock}`);
      } catch (error) {
        console.log(error.name, error.message);
      }
    }
  }
  */
  /**
   * ÈáãÊîæÁÄèË¶ΩÂô® screen lock

  async function releaseScreenLock() {
    if (typeof screenLock !== "undefined" && screenLock !== null) {
      await screenLock.release();
      console.log(`screen lock released`);
      screenLock = null;
    }
  }
   */
  /**
   * ËÆäÊõ¥ isRecord ÁãÄÊÖã
   */
  function handleChangeRecordFile() {
    if (Recorder) {
      Recorder.setIsRecord = recordFileCheckbox.checked;
    }
  }
